module.exports="#define GLSLIFY 1\n#define OCTAVES  6\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform vec4 resolution;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vLayer0;\nvarying vec3 vLayer1;\nvarying vec3 vLayer2;\nvarying vec3 vNormal;\nvarying vec3 eyeVector;\nfloat PI = 3.141592653589793238;\n\nuniform samplerCube uPerlinCube;\nfloat uTint = 0.26;\nfloat uBrightness = 0.6;\nvec3 brightnessToColor(float b)\n{\n\tb *= uTint;\n\treturn (vec3(b, b * b, b*b*b * b)/ (uTint)) * uBrightness;\n}\n\nfloat ocean(in vec3 p){\n\tfloat sum = 0.;\n\tsum += textureCube(uPerlinCube, vLayer0).r;\n\tsum += textureCube(uPerlinCube, vLayer1).r;\n\tsum += textureCube(uPerlinCube, vLayer2).r;\n\treturn sum * 0.33;\n}\n\nfloat Fresnel(vec3 eyeVector, vec3 worldNormal) {\n\treturn pow( 1.0 + dot( eyeVector, worldNormal), 3.0 );\n}\n\nvoid main()\t{\n\tgl_FragColor = textureCube(uPerlinCube,vPosition);\n\tgl_FragColor = vec4(ocean(vPosition));\n\n\tfloat fresnel = Fresnel(eyeVector, vNormal);\n\n\tfloat brightness = ocean(vPosition);\n\tbrightness = brightness * 4. + 1.;\n\tbrightness += fresnel;\n\n\tvec3 col = brightnessToColor(brightness);\n\tcol = clamp(col, 0., 1.);\n\n\tgl_FragColor.rgb = col;\n\t// gl_FragColor.rgb = eyeVector;\n\n\t\n\t// gl_FragColor = vec4(f);\n\t// gl_FragColor = vec4(textureCube(uPerlinCube, vLayer0).r);\n\t// vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\t// gl_FragColor = vec4(vUv,0.0,1.);\n}";